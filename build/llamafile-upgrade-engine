#!/bin/sh
BIN=${0%/*}
PROG=${0##*/}

if [ x"$1" = x"--help" ]; then
  echo "Usage: $PROG [OPTION]... <old> <new>"
  echo "Upgrade llamafile archives."
  echo
  echo "Options:"
  echo "  -h, --help            display this help and exit"
  echo "  -f, --force           skip version check"
  echo "  -v, --verbose         verbose mode"
  echo
  echo "Arguments:"
  echo "  <old>                 the name of the old llamafile archive to be upgraded"
  echo "  <new>                 the name of the new llamafile archive to be created"
  echo
  echo "Example:"
  echo "  $PROG old.llamafile new.llamafile"
  echo "  This command will upgrade the old_llamafile to a new llamafile named new_llamafile."
  echo
  echo "When you run this program, it's recommended that you've"
  echo "downloaded or installed an official llamafile-VERSION.zip"
  echo "from https://github.com/Mozilla-Ocho/llamafile/releases"
  echo "because they include prebuilt DLLs for CUDA and ROCm."
  echo "You can verify your llamafile has them w/ unzip -vl"
  exit 0
fi

abort() {
  echo "repackaging terminated." >&2
  exit 1
}

# find paths of golden llamafile binaries
#
# 1. if user downloaded `llamafile-VERSION.zip`, extracted it, and ran
#    `./llamafile-VERSION/bin/llamafile-convert` directly, then we can
#    support that by looking for a `llamafile` in the same bin folder.
#
# 2. otherwise, perform a $PATH lookup for llamafile
#
LLAMAFILE="$BIN/llamafile"
if [ ! -x "$LLAMAFILE" ]; then
  LLAMAFILE=$(command -v llamafile) || abort
fi
ZIPALIGN="$BIN/zipalign"
if [ ! -x "$ZIPALIGN" ]; then
  ZIPALIGN=$(command -v zipalign) || abort
fi

# Parse command-line options
force_upgrade=false
verbose=false
while getopts "fv" opt; do
    case $opt in
        f)
            force_upgrade=true
            echo "Skipping version check."
            ;;
        v)
            verbose=true
            echo "Verbose Output Mode."
            ;;
    esac
done

# Shift the option parameters
shift $((OPTIND - 1))

# Remove .llamafile extension from arguments if present
old_llamafile="${1%.llamafile}"
if [ -z "$2" ]; then
    new_llamafile="${1%.llamafile}.updated"
else
    new_llamafile="${2%.llamafile}"
fi

# Obtain versions of old and new llamafiles
old_llamafile_engine_version=$("./$old_llamafile.llamafile" --version) || abort
new_llamafile_engine_version=$("$LLAMAFILE" --version) || abort

# Check if llamafile has been upgraded
echo "== Engine Version Check ==" >&2
echo "Engine version from $old_llamafile: $old_llamafile_engine_version" >&2
echo "Engine version from $LLAMAFILE: $new_llamafile_engine_version" >&2
if [ "$old_llamafile_engine_version" = "$new_llamafile_engine_version" ] && [ "$force_upgrade" != "true" ]; then
    echo "Upgrade not required. Exiting..." >&2
    exit 0
fi

if [ "$verbose" = "true" ]; then
    echo "== Current Content ==" >&2
    zipinfo "${old_llamafile}.llamafile" || abort
fi

echo "== Repackaging / Upgrading ==" >&2
tempdir=$(mktemp -d) || abort
echo "extracting..." >&2
unzip "${old_llamafile}.llamafile" -d "$tempdir" || abort
echo "repackaging..." >&2
cp "$LLAMAFILE" "${new_llamafile}.llamafile" || abort
"$ZIPALIGN" -j0 "${new_llamafile}.llamafile" "$tempdir"/*.gguf "$tempdir"/.args || abort

echo "== Completed ==" >&2
rm -rf "$tempdir"